parse_problem_task:
  description: |
    Take the user’s raw input "{problem}" and return a cleaned, concise summary
    of the issue that needs to be solved.
    Do not change meaning, add context, or include quotes—only clean up the wording.
    Output exactly one sentence.
  expected_output: |
    One concise sentence summarizing the user’s problem.
  agent: text_parser

lookup_manual_task:
  description: |
    Using the cleaned summary "{context.parse_problem_task}", retrieve the most relevant passages
    from the pre‑indexed Pinecone vector store via the `manual_qa` tool.
    Return a Markdown‑formatted excerpt containing those sections.
  expected_output: |
    A Markdown excerpt from the manual with the relevant section.
  agent: manual_qa_agent
  depends_on:
    - parse_problem_task

generate_solution_task:
  description: |
    Given the summary "{context.parse_problem_task}" and manual excerpt
    "{context.lookup_manual_task}", produce a detailed, step-by-step solution.
    - Numbered steps  
    - List required tools and materials  
    - Include safety tips and troubleshooting notes
  expected_output: |
    A Markdown step-by-step guide.
  agent: mechanic_expert
  depends_on:
    - parse_problem_task
    - lookup_manual_task

scrape_parts_task:
  description: |
    From the solution steps (“{context.generate_solution_task}”), extract
    all tools and materials mentioned.  
    **For each item**:
    1. Invoke the `parts_scraper` tool with exactly that item’s name.  
    2. Take the `amazon`, `autozone` and `oreilly` URLs *directly* from the tool’s output.  
    3. Format them as markdown links, annotating which is “Cheapest”, “Highest rated” or “Alternative”.
  expected_output: |
    A markdown list of clickable links **only** using the URLs the tool returned,
    plus an “Additional resources” section.
  agent: parts_scraper_agent
  depends_on:
    - generate_solution_task

enrichment_task:
  description: |
    Enrich the solution from "{context.generate_solution_task}" with additional context:
    - Analyze the solution and problem "{problem}" and determine estimated time to complete and total cost.
    - Add a sentence on estimated price for materials/tools (overestimate this number).
    - Add a sentence on estimated time to complete the repair.
    - Add a sentence on time frame or mileage for when the parts need to be replaced or changed.
  expected_output: |
    A Markdown document with enriched content, explicitly mentioning estimated time and total cost at the top.
  agent: mechanic_supervisor
  depends_on:
    - generate_solution_task

format_guide_task:
  description: |
    Format the enriched solution from "{context.enrichment_task}" and the parts links from "{context.scrape_parts_task}"
    into a structured JSON output. You will be as specific and detailed as possible. Ensure it includes:
    - title  
    - estimated time to complete  
    - total cost of parts/materials/tools  
    - “Needs to be replaced/changed in” mileage or months  
    - difficulty rating  
    - lists of tools and materials (INCLUDE ALL IN THE OUTPUT)
    - steps, each with tools_needed, materials_needed, safety_tips, troubleshooting_notes  
    - a “Looking for tools and materials?” section that embeds the exact markdown links returned by the parts scraper  
    - an “Additional resources” section  
    - overall summary
  expected_output: |
    RESTATE THE FULL STRUCTURED JSON OUTPUT. DO NOT SAY THE OUTPUT IS THE "ABOVE JSON"
    IT **NEEDS** BE A **FULL** STRUCTURED JSON OUTPUT matching the specified schema.
    {
        "title": "Solution Title",
            "Estimated_Time": "___ hours/minutes",
            "Needs to be replaced/changed in: "___ miles or ___ months",
            "Difficulty rating": "___ out of 10",
            "Estimated_Cost for tools/materials": "___ dollars",
            "Estimated_Cost for Part(s)": "___ dollars",
            "Tools": ["Tool1", "Tool2", ...],
            "materials": ["Material1", "Material2", ...],
            "steps": [
                {
                    "step_number": 1,
                    "description": "Step description",
                    "tools_needed": ["Tool1", "Tool2"],
                    "materials_needed": ["Material1"],
                    "safety_tips": ["Safety tip 1", "Safety tip 2"],
                    "troubleshooting_notes": ["Troubleshooting note 1"]
                },
                {
                    "step_number": 2,
                    "description": "Next step description",
                    "tools_needed": ["Tool3"],
                    "materials_needed": ["Material2"],  
                    "safety_tips": ["Safety tip 3"],
                    "troubleshooting_notes": []
                }
                ...
            ],
            "Looking for tools and materials?": [
                {
                     "Tool1": [
                        "https://www.amazon.com/..." - Cheapest,
                        "https://www.autozone.com/..." - Highest rated
                        "https://www.oreillyauto.com/..." - Alternative
                        ],
                     "Tool2": [
                        "https://www.amazon.com/..." - Alternative,
                        "https://www.autozone.com/..." - Highest rated, 
                        "https://www.oreillyauto.com/..." - Cheapest,
                        ],
                     "Tool...": [
                        "https://www.autozone.com/..." - Highest rated,
                        "https://www.oreillyauto.com/..." - Cheapest,
                        "https://www.amazon.com/..." - Alternative
                        ],
                     "Material1": [
                        "https://www.oreillyauto.com/..." - Cheapest,
                        "https://www.autozone.com/..." - Highest rated,
                        "https://www.amazon.com/..." - Alternative
                        ],
                     ...
                }
            ],
            "Additional resources": [
                    "Free vehicle manuals": "https://charm.li/"
                    "Free vehicle repair guides": "https://www.carcarekiosk.com/"
                }
                ],
            "summary": "Overall summary of the solution"
  agent: formatter_agent
  depends_on:
    - enrichment_task
    - scrape_parts_task